/**
 * @file Firebase Security Rules for OmniPost AI.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data, with role-based access control for team-related data. It prioritizes security and prevents unauthorized access to user-specific information while allowing controlled collaboration within teams.
 *
 * Data Structure:
 * - /users/{userId}: Root document for user profiles and personal data.
 * - /teams/{teamId}: Root document for team information.
 * - /teams/{teamId}/members/{memberId}: Subcollection representing team memberships and roles.
 * - /users/{userId}/socialMediaAccounts/{socialMediaAccountId}: Social media accounts owned by the user.
 * - /users/{userId}/posts/{postId}: Social media posts created by the user.
 * - /users/{userId}/posts/{postId}/platformPosts/{platformPostId}: Platform-specific post instances.
 * - /subscriptions/{subscriptionId}: Subscription plan information.
 * - /platformCredentials/{userId}: Platform specific OAuth credentials
 *
 * Key Security Decisions:
 * - User-owned data is strictly limited to the owning user.
 * - Team access is governed by roles defined within the `members` map on the Team document.
 * - Public listing of user-specific collections is disabled to protect user privacy.
 *
 * Denormalization for Authorization:
 * - The `ownerId` field on `Team` documents is used for efficient ownership checks.
 * - The `members` map on `Team` documents stores user roles for role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to platform credentials based on user ID.
     * @path /platformCredentials/{userId}
     * @allow (get) User with matching ID: request.auth.uid == userId
     * @deny (get) User without matching ID: request.auth.uid != userId
     * @allow (create) User with matching ID: request.auth.uid == userId
     * @deny (create) User without matching ID: request.auth.uid != userId
     * @allow (update) User with matching ID: request.auth.uid == userId
     * @deny (update) User without matching ID: request.auth.uid != userId
     * @allow (delete) User with matching ID: request.auth.uid == userId
     * @deny (delete) User without matching ID: request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /platformCredentials/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (get) User with matching ID: request.auth.uid == userId
     * @deny (get) User without matching ID: request.auth.uid != userId
     * @allow (create) User with matching ID: request.auth.uid == userId
     * @deny (create) User without matching ID: request.auth.uid != userId
     * @allow (update) User with matching ID: request.auth.uid == userId
     * @deny (update) User without matching ID: request.auth.uid != userId
     * @allow (delete) User with matching ID: request.auth.uid == userId
     * @deny (delete) User without matching ID: request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages team information with role-based access.
     * @path /teams/{teamId}
     * @allow (get) Any signed-in user.
     * @deny (get) Any user not signed-in.
     * @allow (create) User is signed in and sets themself as owner: isSignedIn() && request.resource.data.ownerId == request.auth.uid
     * @deny (create) User is not signed in: !isSignedIn()
     * @allow (update) User is owner of team: isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null
     * @deny (update) User is not owner of team: isSignedIn() && resource.data.ownerId != request.auth.uid
     * @allow (delete) User is owner of team: isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null
     * @deny (delete) User is not owner of team: isSignedIn() && resource.data.ownerId != request.auth.uid
     * @principle Enforces ownership for team creation and management.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isTeamOwner(teamId);
      allow delete: if isSignedIn() && isTeamOwner(teamId);
    }

    /**
     * @description Manages team membership and roles.
     * @path /teams/{teamId}/members/{memberId}
     * @allow (get) User is a member of the team: isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid] != null
     * @deny (get) User is not a member of the team: !isSignedIn() || get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid] == null
     * @allow (create) User is owner of the team: isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid
     * @deny (create) User is not owner of the team: !isSignedIn() || get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId != request.auth.uid
     * @allow (update) User is owner of the team: isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid && resource != null
     * @deny (update) User is not owner of the team: !isSignedIn() || get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId != request.auth.uid
     * @allow (delete) User is owner of the team: isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid && resource != null
     * @deny (delete) User is not owner of the team: !isSignedIn() || get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId != request.auth.uid
     * @principle Enforces role-based access control for team management.
     */
    match /teams/{teamId}/members/{memberId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if false;
      allow create: if isSignedIn() && isTeamOwner(teamId);
      allow update: if isSignedIn() && isTeamOwner(teamId);
      allow delete: if isSignedIn() && isTeamOwner(teamId);
    }

    /**
     * @description Manages social media accounts associated with a user.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (get) User with matching ID: request.auth.uid == userId
     * @deny (get) User without matching ID: request.auth.uid != userId
     * @allow (create) User with matching ID: request.auth.uid == userId
     * @deny (create) User without matching ID: request.auth.uid != userId
     * @allow (update) User with matching ID: request.auth.uid == userId
     * @deny (update) User without matching ID: request.auth.uid != userId
     * @allow (delete) User with matching ID: request.auth.uid == userId
     * @deny (delete) User without matching ID: request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages social media posts created by a user.
     * @path /users/{userId}/posts/{postId}
     * @allow (get) User with matching ID: request.auth.uid == userId
     * @deny (get) User without matching ID: request.auth.uid != userId
     * @allow (create) User with matching ID: request.auth.uid == userId
     * @deny (create) User without matching ID: request.auth.uid != userId
     * @allow (update) User with matching ID: request.auth.uid == userId
     * @deny (update) User without matching ID: request.auth.uid != userId
     * @allow (delete) User with matching ID: request.auth.uid == userId
     * @deny (delete) User without matching ID: request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/posts/{postId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages platform-specific post information related to a main post.
     * @path /users/{userId}/posts/{postId}/platformPosts/{platformPostId}
     * @allow (get) User with matching ID: request.auth.uid == userId
     * @deny (get) User without matching ID: request.auth.uid != userId
     * @allow (create) User with matching ID: request.auth.uid == userId
     * @deny (create) User without matching ID: request.auth.uid != userId
     * @allow (update) User with matching ID: request.auth.uid == userId
     * @deny (update) User without matching ID: request.auth.uid != userId
     * @allow (delete) User with matching ID: request.auth.uid == userId
     * @deny (delete) User without matching ID: request.auth.uid != userId
     * @principle Enforces document ownership for all operations, inheriting from parent post.
     */
    match /users/{userId}/posts/{postId}/platformPosts/{platformPostId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages subscription plan information.
     * @path /subscriptions/{subscriptionId}
     * @allow (get) Public read access.
     * @deny (create, update, delete) No write access granted.
     * @principle Allows public read access to subscription plans.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isTeamOwner(teamId) {
    return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
  }

  function isTeamMember(teamId) {
    return request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members;
  }
}