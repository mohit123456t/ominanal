/**
 * @fileoverview Firestore Security Rules for OmniPost AI.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and uses a role-based model for team collaboration.
 * Data is organized hierarchically under users and teams. All write operations are protected by authorization checks, and
 * read operations are restricted to owners and authorized collaborators unless explicitly public.
 *
 * Data Structure:
 * - /users/{userId}: Root for individual user data.
 * - /teams/{teamId}: Root for team data.
 * - /teams/{teamId}/members/{memberId}: Subcollection for team membership and roles.
 * - /users/{userId}/socialMediaAccounts/{accountId}: Social media accounts owned by users.
 * - /users/{userId}/posts/{postId}: Posts created by users.
 * - /users/{userId}/posts/{postId}/platformPosts/{platformPostId}: Platform-specific instances of posts.
 * - /subscriptions/{subscriptionId}: Subscription plan details.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Team data is accessed based on team membership and roles.
 * - Subscriptions are publicly readable but not writable by clients.
 * - Listing of user-owned subcollections is allowed for the owner.
 *
 * Denormalization for Authorization:
 * - User ID is included in post documents to allow for direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and if the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
    }
    
    /**
     * @description Checks if the authenticated user is a team owner
     * @param {string} teamId - The team ID to check.
     */
    function isTeamOwner(teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role == 'owner';
    }

    /**
     * @description Checks if the authenticated user is a team admin
     * @param {string} teamId - The team ID to check.
     */
    function isTeamAdmin(teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the authenticated user is a team member with any role
     * @param {string} teamId - The team ID to check.
     */
    function isTeamMember(teamId) {
      return exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid));
    }

    /**
     * @description Security rules for user documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creating their own document.
     * @allow (get, update, delete) - Authenticated user accessing their own document.
     * @deny (list) - Listing all users is not permitted.
     * @deny (create) - Creating a user with a mismatched user ID.
     * @deny (update, delete) - Modifying or deleting another user's document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for team documents.
     * @path /teams/{teamId}
     * @allow (create) - Authenticated user creating their own team.
     * @allow (get, update, delete) - Team owner accessing their own team.
     * @deny (list) - Listing all teams is not permitted.
     * @deny (create) - Creating a team with a mismatched ownerId.
     * @deny (update, delete) - Modifying or deleting another team's document.
     */
    match /teams/{teamId} {
      allow get: if isTeamMember(teamId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isTeamOwner(teamId);
      allow delete: if isTeamOwner(teamId);
    }

    /**
     * @description Security rules for team members documents.
     * @path /teams/{teamId}/members/{memberId}
     * @allow (create) - Authenticated user creating their own team member document.
     * @allow (get, update, delete) - Team owner accessing their own team member document.
     * @deny (list) - Listing all team members is not permitted.
     * @deny (create) - Creating a team member document with a mismatched teamId or userId.
     * @deny (update, delete) - Modifying or deleting another team member's document.
     */
    match /teams/{teamId}/members/{memberId} {
      allow get: if isTeamMember(teamId);
      allow list: if false;
      allow create: if isTeamOwner(teamId);
      allow update: if isTeamOwner(teamId);
      allow delete: if isTeamOwner(teamId);
    }

     /**
      * @description Security rules for platform credentials documents.
      * @path /users/{userId}/platformCredentials/{platform}
      * @allow (create) - Authenticated user creating their own platform credentials.
      * @allow (get, update, delete) - Authenticated user accessing their own platform credentials.
      * @deny (list) - Listing all platform credentials is not permitted.
      * @deny (create) - Creating a platform credentials with a mismatched userId.
      * @deny (update, delete) - Modifying or deleting another user's platform credentials.
      * @principle Enforces document ownership for platform credentials.
      */
    match /users/{userId}/platformCredentials/{platform} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for social media account documents.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) - Authenticated user creating their own social media account.
     * @allow (get, list, update, delete) - Authenticated user accessing their own social media account.
     * @deny (create) - Creating a social media account with a mismatched user ID.
     * @deny (update, delete) - Modifying or deleting another user's social media account.
     * @principle Enforces document ownership for social media accounts.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for post documents.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) - Authenticated user creating their own post.
     * @allow (get, list, update, delete) - Authenticated user accessing their own post.
     * @deny (create) - Creating a post with a mismatched user ID.
     * @deny (update, delete) - Modifying or deleting another user's post.
     * @principle Enforces document ownership for posts.
     */
    match /users/{userId}/posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for platform post documents.
     * @path /users/{userId}/posts/{postId}/platformPosts/{platformPostId}
     * @allow (create, get, list, update, delete) - Inherits authorization from parent post.
     * @principle Inherits authorization from parent post.
     */
    match /users/{userId}/posts/{postId}/platformPosts/{platformPostId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for subscription documents.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) - Publicly readable subscription information.
     * @deny (create, update, delete) - Clients cannot modify subscription plans.
     * @principle Public read access with no client write access for subscriptions.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}