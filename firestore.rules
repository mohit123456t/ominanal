rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants full access only to the authenticated user.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @deny (get) User with ID 'user456' cannot read user 'user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows team owners and admins to manage team data and members.
     * @path /teams/{teamId}
     * @allow (create) User with owner role can create a team.
     * @allow (get) User with a role in the team can read team info.
     * @deny (update) User without a role in the team cannot update team info.
     * @principle Enforces role-based access control for team data.
     */
    match /teams/{teamId} {
      function userRole(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role;
      }
      function isAdminOrOwner(teamId) {
        return isSignedIn() && (userRole(teamId) == 'admin' || userRole(teamId) == 'owner');
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid));
      allow list: if false;
      allow create: if request.auth.uid == request.resource.data.ownerId && isSignedIn();
      allow update: if isAdminOrOwner(teamId);
      allow delete: if isAdminOrOwner(teamId);
    }

    /**
     * @description Allows team members to be managed by team admins and owners.
     * @path /teams/{teamId}/members/{memberId}
     * @allow (create) Team admin can add a new member.
     * @allow (get) Team member can view their own membership.
     * @deny (delete) Non-admin cannot remove a member.
     * @principle Role-based access control for team membership.
     */
    match /teams/{teamId}/members/{memberId} {
        function getTeamId() {
            return request.path[6];
        }
        function userRole() {
          return get(/databases/$(database)/documents/teams/$(getTeamId())/members/$(request.auth.uid)).data.role;
        }
        function isAdminOrOwner() {
          return isSignedIn() && (userRole() == 'admin' || userRole() == 'owner');
        }
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn() && request.auth.uid == memberId;
        allow list: if false;
        allow create: if isAdminOrOwner();
        allow update: if isAdminOrOwner();
        allow delete: if isAdminOrOwner();
    }

    /**
     * @description Grants the user access to their own platform credentials.
     * @path /users/{userId}/platformCredentials/{platform}
     * @allow (create) User 'user123' can create credentials for their account.
     * @allow (get) User 'user123' can retrieve credentials for their account.
     * @deny (update) User 'user456' cannot update user 'user123's credentials.
     * @principle User can only manage their own platform credentials.
     */
    match /users/{userId}/platformCredentials/{platform} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Grants the user access to their own social media accounts.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) User 'user123' can add a social media account.
     * @allow (get) User 'user123' can view their social media accounts.
     * @deny (update) User 'user456' cannot modify user 'user123's social media accounts.
     * @principle User can only manage their own social media accounts.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants the user access to their own posts.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) User 'user123' can create a post.
     * @allow (get) User 'user123' can view their posts.
     * @deny (update) User 'user456' cannot modify user 'user123's posts.
     * @principle User can only manage their own posts.
     */
    match /users/{userId}/posts/{postId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to platform-specific posts based on the parent post's ownership.
     * @path /users/{userId}/posts/{postId}/platformPosts/{platformPostId}
     * @allow (create) User 'user123' can create a platform post under their post.
     * @allow (get) User 'user123' can view their platform posts.
     * @deny (update) User 'user456' cannot modify user 'user123's platform posts.
     * @principle Inherits ownership from the parent post.
     */
    match /users/{userId}/posts/{postId}/platformPosts/{platformPostId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to subscription plans, with owner-only writes.
     * @path /subscriptions/{subscriptionId}
     * @allow (get) Any user can retrieve subscription information.
     * @deny (create) Anonymous user cannot create a subscription plan.
     * @principle Public read access with restricted write access for subscriptions.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}