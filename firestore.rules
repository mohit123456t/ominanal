/**
 * @fileoverview Firestore Security Rules for OmniPost AI platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * and role-based access control for team-related data. Read access is generally
 * restricted to the owner or authorized team members, while write access is
 * even more tightly controlled, preventing unauthorized data modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. All user-owned data is nested
 *   under this path.
 * - /teams/{teamId}: Stores team information.
 * - /teams/{teamId}/members/{memberId}: Stores membership information for teams.
 * - /users/{userId}/socialMediaAccounts/{socialMediaAccountId}: Stores social
 *   media accounts associated with a user.
 * - /users/{userId}/posts/{postId}: Stores social media posts created by a user.
 * - /users/{userId}/posts/{postId}/platformPosts/{platformPostId}: Stores
 *   platform-specific instances of a post.
 * - /subscriptions/{subscriptionId}: Stores subscription plan details.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Team data is accessible based on membership and roles within the team.
 * - Data validation is limited to relational integrity and authorization-critical
 *   fields, allowing for flexible data shapes during prototyping.
 * - List operations are restricted to owners for user-scoped subcollections.
 * - Destructive operations (update, delete) require verifying the document's
 *   existence before proceeding.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user_abc' can create their profile if authenticated as 'user_abc'.
     * @allow (get) User with ID 'user_abc' can read their profile if authenticated as 'user_abc'.
     * @allow (update) User with ID 'user_abc' can update their profile if authenticated as 'user_abc'.
     * @allow (delete) User with ID 'user_abc' can delete their profile if authenticated as 'user_abc'.
     * @deny (create) User with ID 'user_xyz' cannot create profile 'user_abc'.
     * @deny (get) User with ID 'user_xyz' cannot read profile 'user_abc'.
     * @deny (update) User with ID 'user_xyz' cannot update profile 'user_abc'.
     * @deny (delete) User with ID 'user_xyz' cannot delete profile 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure team information. Only team members can read and write team data.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure team membership information. Only team members can read and write membership data.
     * @path /teams/{teamId}/members/{memberId}
     */
    match /teams/{teamId}/members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure social media accounts. Only the owner user can manage their accounts.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) User 'user_abc' creates account 'social_abc' under their profile.
     * @allow (get) User 'user_abc' reads account 'social_abc' under their profile.
     * @allow (update) User 'user_abc' updates account 'social_abc' under their profile.
     * @allow (delete) User 'user_abc' deletes account 'social_abc' under their profile.
     * @deny (create) User 'user_xyz' cannot create account 'social_abc' for 'user_abc'.
     * @deny (get) User 'user_xyz' cannot read account 'social_abc' for 'user_abc'.
     * @deny (update) User 'user_xyz' cannot update account 'social_abc' for 'user_abc'.
     * @deny (delete) User 'user_xyz' cannot delete account 'social_abc' for 'user_abc'.
     * @principle Enforces user ownership for social media accounts.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure social media posts. Only the owner user can manage their posts.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) User 'user_abc' creates post 'post_abc' under their profile.
     * @allow (get) User 'user_abc' reads post 'post_abc' under their profile.
     * @allow (update) User 'user_abc' updates post 'post_abc' under their profile.
     * @allow (delete) User 'user_abc' deletes post 'post_abc' under their profile.
     * @deny (create) User 'user_xyz' cannot create post 'post_abc' for 'user_abc'.
     * @deny (get) User 'user_xyz' cannot read post 'post_abc' for 'user_abc'.
     * @deny (update) User 'user_xyz' cannot update post 'post_abc' for 'user_abc'.
     * @deny (delete) User 'user_xyz' cannot delete post 'post_abc' for 'user_abc'.
     * @principle Enforces user ownership for social media posts.
     */
    match /users/{userId}/posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure platform-specific post instances. Authorization inherited from parent post.
     * @path /users/{userId}/posts/{postId}/platformPosts/{platformPostId}
     */
    match /users/{userId}/posts/{postId}/platformPosts/{platformPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure subscription plan information. Public read, no writes allowed via rules.
     * @path /subscriptions/{subscriptionId}
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}