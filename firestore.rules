/**
 * @fileoverview Firestore Security Rules for OmniPost AI Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content (social media accounts, posts, analytics).
 * Users can only access their own data.
 * Administrative privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles.
 * - `/users/{userId}/socialMediaAccounts/{socialMediaAccountId}`: Stores social media accounts owned by a user.
 * - `/users/{userId}/posts/{postId}`: Stores posts created by a user.
 * - `/subscriptions/{subscriptionId}`: Stores subscription plans (public read).
 * - `/users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}`: Stores analytics data for social media accounts owned by a user.
 * - `/roles_admin/{userId}`: Indicates administrator privileges.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own social media accounts, posts, and analytics.
 * - Listing of user subcollections is allowed only for the owner.
 * - Subscription plans are publicly readable.
 * - Administrative privileges are granted based on the existence of a document in `/roles_admin/{userId}`.
 * - No listing of users is allowed.
 *
 * Denormalization for Authorization:
 *  - User ownership is enforced through hierarchical data structure (`/users/{userId}/...`).
 *  - Admin privileges are determined by the existence of a document in `/roles_admin/{userId}`.
 *  - Subscriptions are public
 *
 * Structural Segregation:
 *  - Private user data is stored under `/users/{userId}`, while public subscription data is stored at the root level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile with a different ID (e.g., 'user456').
     * @allow (get, update, delete) User with ID 'user123' can get, update, and delete their own profile.
     * @deny (get, update, delete) User with ID 'user123' cannot get, update, or delete another user's profile (e.g., 'user456').
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to social media accounts associated with a user. Only the user can manage their own social media accounts.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) User with ID 'user123' can create a social media account under their profile.
     * @deny (create) User with ID 'user123' cannot create a social media account under another user's profile (e.g., 'user456').
     * @allow (get, list, update, delete) User with ID 'user123' can get, list, update, and delete their own social media accounts.
     * @deny (get, list, update, delete) User with ID 'user123' cannot get, list, update, or delete another user's social media accounts.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Controls access to posts created by a user. Only the user can manage their own posts.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) User with ID 'user123' can create a post under their profile.
     * @deny (create) User with ID 'user123' cannot create a post under another user's profile (e.g., 'user456').
     * @allow (get, list, update, delete) User with ID 'user123' can get, list, update, and delete their own posts.
     * @deny (get, list, update, delete) User with ID 'user123' cannot get, list, update, or delete another user's posts.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Controls access to subscription plans. All users can read subscription plans.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) All users can read subscription plans.
     * @deny (create, update, delete) No users can create, update, or delete subscription plans.
     * @principle Allows public read access with restricted write access.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to analytics data for social media accounts. Only the user can manage their own analytics data.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}
     * @allow (create) User with ID 'user123' can create analytics data under their social media account.
     * @deny (create) User with ID 'user123' cannot create analytics data under another user's social media account (e.g., 'user456').
     * @allow (get, list, update, delete) User with ID 'user123' can get, list, update, and delete their own analytics data.
     * @deny (get, list, update, or delete) User with ID 'user123' cannot get, list, update, or delete another user's analytics data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) Only an existing admin can manage other admins.
     * @allow (list) Listing admins is not allowed.
     * @principle Existence of the document grants admin privileges; admins can manage other admins.
     */
    match /roles_admin/{userId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get: if isSignedIn() && isAdmin();
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }
  }
}