/**
 * @fileoverview Firestore Security Rules for OmniPost AI platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, social media accounts, and posts.
 * Additionally, it uses a separate collection (`/roles_admin/{userId}`) to grant admin privileges based on document existence.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. User ID is used for ownership.
 * - /users/{userId}/socialMediaAccounts/{socialMediaAccountId}: Stores social media accounts. User ID is used for ownership.
 * - /users/{userId}/posts/{postId}: Stores social media posts. User ID is used for ownership.
 * - /subscriptions/{subscriptionId}: Stores subscription plan details. Publicly readable.
 * - /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}: Stores analytics data. User ID is used for ownership.
 * - /roles_admin/{userId}:  Marks a user as an admin.  Existence of document confers admin privileges.
 *
 * Key Security Decisions:
 * - User data is strictly owned and controlled by the individual user.
 * - Listing of users is not permitted.
 * - Subscription data is publicly readable.
 * - Admin privileges are granted by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Denormalization for Authorization:
 *  - The data structure is designed to avoid `get()` calls in rules. Ownership is determined by the document path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner.
     * @param {string} userId - The user ID to check for ownership.
     * @returns {boolean} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin based on the existence of a document in /roles_admin/{userId}.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their own profile.
     * @allow (get) - User with matching UID can read their own profile.
     * @allow (update) - User with matching UID can update their own profile.
     * @allow (delete) - User with matching UID can delete their own profile.
     * @deny (create) - User tries to create a profile with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for social media accounts under a user.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) - User with matching UID can create a social media account under their profile.
     * @allow (get) - User with matching UID can read a social media account under their profile.
     * @allow (update) - User with matching UID can update a social media account under their profile.
     * @allow (delete) - User with matching UID can delete a social media account under their profile.
     * @deny (create) - User tries to create a social media account with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for posts under a user.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) - User with matching UID can create a post under their profile.
     * @allow (get) - User with matching UID can read a post under their profile.
     * @allow (update) - User with matching UID can update a post under their profile.
     * @allow (delete) - User with matching UID can delete a post under their profile.
     * @deny (create) - User tries to create a post with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for subscription plans.
     * @path /subscriptions/{subscriptionId}
     * @allow (get) - Anyone can read subscription plans.
     * @allow (list) - Anyone can list subscription plans.
     * @deny (create) - No one can create subscription plans through the client.
     * @deny (update) - No one can update subscription plans through the client.
     * @deny (delete) - No one can delete subscription plans through the client.
     * @principle Publicly readable data.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for analytics data under a user's social media account.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}
     * @allow (create) - User with matching UID can create analytics data under their social media account.
     * @allow (get) - User with matching UID can read analytics data under their social media account.
     * @allow (update) - User with matching UID can update analytics data under their social media account.
     * @allow (delete) - User with matching UID can delete analytics data under their social media account.
     * @deny (create) - User tries to create analytics data with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) - Only an existing admin can create an admin user.
     * @allow (get) - Any authenticated user can check if a user is an admin by attempting to read.
     * @allow (update) - No one can update admin roles through the client.
     * @allow (delete) - Only an existing admin can delete an admin user.
     * @principle Existence of document grants admin privileges.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false; // Prevent listing of admin roles.

        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }
  }
}