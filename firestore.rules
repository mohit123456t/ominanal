/**
 * @file Firebase Security Rules for OmniPost AI Platform
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for most data, with administrative privileges granted via a dedicated 'roles_admin' collection. Data is nested under `/users/{userId}` to simplify authorization checks based on the user's UID.
 * @data_structure
 *   - `/users/{userId}`: Stores user profiles, with the userId used for ownership checks.
 *   - `/users/{userId}/socialMediaAccounts/{socialMediaAccountId}`: Stores social media accounts owned by the user.
 *   - `/users/{userId}/posts/{postId}`: Stores social media posts created by the user.
 *   - `/subscriptions/{subscriptionId}`: Stores subscription plans (public read).
 *   - `/users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}`: Stores analytics data owned by the user.
 *   - `/roles_admin/{userId}`: Documents in this collection grant admin privileges to the corresponding user.
 * @key_security_decisions
 *   - User listing is disallowed for privacy.
 *   - The 'subscriptions' collection is publicly readable.
 *   - Admin privileges are determined by the existence of a document in `/roles_admin/{userId}`.
 *   - All write operations (create, update, delete) require authorization.
 * @denormalization_for_authorization: User ownership is enforced by nesting data under /users/{userId} and using the userId as the document ID. Admin privileges are granted by the existence of a document in /roles_admin/{userId}.
 * @structural_segregation User-owned data is segregated under /users/{userId} to simplify authorization. Admin roles are stored in a separate collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner (signed in, owner, and resource exists).
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user is an existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin based on the existence of a document in `/roles_admin/{userId}`.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /****************** User Profile Rules ******************/

    /**
     * @description Manages access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     * @deny (create) Signed-in user attempts to create a profile with a mismatched ID.
     * @deny (get, update, delete) Signed-in user attempts to access another user's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /****************** Social Media Account Rules ******************/

    /**
     * @description Manages access to social media accounts associated with a user.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) Signed-in user creates a social media account under their profile.
     * @allow (get, update, delete) Signed-in user accesses their own social media accounts.
     * @deny (create) Signed-in user attempts to create a social media account with a mismatched userId in the path.
     * @deny (get, update, delete) Signed-in user attempts to access another user's social media accounts.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /****************** Post Rules ******************/

    /**
     * @description Manages access to posts created by a user.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) Signed-in user creates a post under their profile.
     * @allow (get, update, delete) Signed-in user accesses their own posts.
     * @deny (create) Signed-in user attempts to create a post with a mismatched userId in the path.
     * @deny (get, update, delete) Signed-in user attempts to access another user's posts.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /****************** Subscription Rules ******************/

    /**
     * @description Manages access to subscription plans.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) Everyone can read subscription plans.
     * @deny (create, update, delete) Only admins can modify subscription plans (TODO: Implement Admin Role)
     * @principle Public read, owner-only writes (requires Admin role).
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /****************** Analytics Rules ******************/

    /**
     * @description Manages access to analytics data for social media accounts.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}
     * @allow (create) Signed-in user creates analytics data under their social media account.
     * @allow (get, update, delete) Signed-in user accesses their own analytics data.
     * @deny (create) Signed-in user attempts to create analytics data with a mismatched userId in the path.
     * @deny (get, update, delete) Signed-in user attempts to access another user's analytics data.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.socialMediaAccountId == socialMediaAccountId;
      allow update: if isExistingOwner(userId) && request.resource.data.socialMediaAccountId == resource.data.socialMediaAccountId;
      allow delete: if isExistingOwner(userId);
    }

     /****************** Admin Role Rules ******************/

    /**
     * @description Manages the assignment of admin roles.  Existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (get) Only admins can view the admin role list.
     * @allow (create, delete) Only admins can assign or remove admin roles.
     * @deny (get, create, update, delete) Non-admins cannot manage admin roles.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }
  }
}