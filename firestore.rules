/**
 * @file Firebase Security Rules for OmniPost AI.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and uses a role-based model for team collaboration.
 * It prioritizes security by default, explicitly denying access unless explicitly granted.
 *
 * Data Structure:
 * - User data is nested under `/users/{userId}`.
 * - Team data resides under `/teams/{teamId}`, with members managed in `/teams/{teamId}/members/{memberId}`.
 * - User's social media accounts and posts are stored under their respective user ID in `/users/{userId}`.
 * - Subscription plans are stored under `/subscriptions/{subscriptionId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data under `/users/{userId}`.
 * - Team ownership and membership are enforced via the `/teams/{teamId}/members/{memberId}` collection, enabling role-based access control.
 * - Listing of documents is generally allowed within a user's own data tree, except where explicitly restricted.
 * - Unauthenticated access is forbidden.
 *
 * Denormalization for Authorization:
 * - The `Team` entity has an `ownerId` field to quickly determine the team owner.
 * - The `TeamMember` entity contains `userId`, `teamId` and `role` fields for efficient role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * Used for update and delete operations to ensure the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to subscription plans.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if false
     * @principle Public read-only data with no modification allowed.
     */
    match /subscriptions/{subscriptionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) if isOwner(userId)
     * @allow (get, list) if false
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (create) if !isOwner(userId)
     * @deny (update, delete) if !isExistingOwner(userId)
     * @principle Enforces document ownership for writes and prevents unauthorized access.
     */
    match /users/{userId} {
      allow get, list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages app-level API credentials for a user and a specific platform.
     * @path /users/{userId}/platformCredentials/{platform}
     * @allow (create, list) if isOwner(userId)
     * @allow (get) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (create, update, delete) if !isOwner(userId)
     * @principle Enforces document ownership for writes and prevents unauthorized access.
     */
    match /users/{userId}/platformCredentials/{platform} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages social media account information associated with a user.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create, list) if isOwner(userId)
     * @allow (get) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (create, update, delete) if !isOwner(userId)
     * @principle Enforces document ownership for writes and prevents unauthorized access.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages social media posts created by a user.
     * @path /users/{userId}/posts/{postId}
     * @allow (create, list) if isOwner(userId)
     * @allow (get) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (create, update, delete) if !isOwner(userId)
     * @principle Enforces document ownership for writes and prevents unauthorized access.
     */
    match /users/{userId}/posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages platform-specific post information related to a main post.
     * @path /users/{userId}/posts/{postId}/platformPosts/{platformPostId}
     * @allow (create, list) if isOwner(userId)
     * @allow (get) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (create, update, delete) if !isOwner(userId)
     * @principle Enforces document ownership and inheritance of authorization from parent post.
     */
    match /users/{userId}/posts/{postId}/platformPosts/{platformPostId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages team information and serves as the root for team-owned data.
     * @path /teams/{teamId}
     * @allow (create) if isSignedIn()
     * @allow (get, list) if false
     * @allow (update, delete) if resource.data.ownerId == request.auth.uid && resource != null;
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if resource.data.ownerId != request.auth.uid || resource == null;
     * @principle Enforces ownership for team creation and modification.
     */
    match /teams/{teamId} {
        allow get, list: if false;
        allow create: if isSignedIn();
        allow update, delete: if resource.data.ownerId == request.auth.uid && resource != null;
    }

      /**
       * @description Stores the list of members for a team and their roles.
       * @path /teams/{teamId}/members/{memberId}
       * @allow (create) if isSignedIn()
       * @allow (get, list) if isSignedIn()
       * @allow (update) if isSignedIn()
       * @allow (delete) if get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid && resource != null
       * @deny (create) if !isSignedIn()
       * @deny (get, list) if !isSignedIn()
       *
       */
      match /teams/{teamId}/members/{memberId} {
          allow get, list, create, update: if isSignedIn();
          allow delete: if get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid && resource != null;
      }
  }
}