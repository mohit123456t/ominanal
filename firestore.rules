/**
 * @file Firestore Security Rules for OmniPost AI Platform
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 * with role-based access for collaborative team data. All data is nested under
 * /users/{userId} or /teams/{teamId} where applicable, ensuring clear ownership
 * and access control. Read access to subscriptions is public, but their management is not supported through this prototype.
 *
 * @data_structure
 * - /users/{userId}: Root for user-specific data, including profile information,
 *   social media accounts, and posts.
 * - /teams/{teamId}: Root for team data, including team information and membership.
 * - /teams/{teamId}/members/{memberId}: Stores team membership information.
 * - /users/{userId}/socialMediaAccounts/{socialMediaAccountId}: Stores social media account
 *   information associated with a user.
 * - /users/{userId}/posts/{postId}: Stores post information created by a user.
 * - /users/{userId}/posts/{postId}/platformPosts/{platformPostId}: Stores platform-specific
 *   post information related to a main post.
 * - /subscriptions/{subscriptionId}: Stores subscription plan information.
 *
 * @key_security_decisions
 * - User listing is disallowed to protect user privacy.
 * - All write operations are protected by authorization checks, ensuring that only
 *   authorized users can modify data.
 * - Role-based access control is implemented for team data, allowing different roles
 *   (e.g., owner, admin, editor) to have different levels of access.
 *
 * @denormalization_for_authorization
 * - The `ownerId` field is used in the `Team` entity to easily determine the owner of a team.
 * - The `userId` field is used in the `TeamMember` entity to easily determine the user associated with a team membership.
 *
 * @structural_segregation User-owned data is stored separately under `/users/{userId}`,
 * while team-owned data is stored under `/teams/{teamId}`, providing clear separation
 * and access control for different types of data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines whether the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     *              This function also verifies that the resource exists to prevent
     *              operations on non-existent documents.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description
     *   Security rules for the `/users/{userId}` collection. This collection stores user profile
     *   information and is the root document for all user-owned data.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their own user document if the userId matches their auth.uid.
     * @allow (get) - Any authenticated user can read any user document.
     * @deny (update) - An unauthenticated user cannot update any user document.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     *   Security rules for the `/teams/{teamId}` collection. This collection stores team information and serves as the root for team-owned data.
     * @path /teams/{teamId}
     * @allow (create) - An authenticated user can create a team.
     * @allow (get) - Any authenticated user can read any team document.
     * @deny (update) - An unauthenticated user cannot update any team document.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if resource.data.ownerId == request.auth.uid && resource != null;
      allow delete: if resource.data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description
     *   Security rules for the `/teams/{teamId}/members/{memberId}` collection. This collection stores the list of members for a team and their roles.
     * @path /teams/{teamId}/members/{memberId}
     * @allow (create) - An authenticated user can create a team member record.
     * @allow (get) - Any authenticated user can read any team member record.
     * @deny (update) - An unauthenticated user cannot update any team member record.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /teams/{teamId}/members/{memberId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description
     *   Security rules for the `/users/{userId}/platformCredentials/{platform}` collection.
     *   This collection stores app-level API credentials for a user and a specific platform.
     * @path /users/{userId}/platformCredentials/{platform}
     * @allow (create) - The owner can create a platform credential
     * @allow (get) - The owner can get a platform credential
     * @deny (update) - Others cannot update
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/platformCredentials/{platform} {
       allow get: if isOwner(userId);
       allow list: if false;
       allow create: if isOwner(userId);
       allow update: if isExistingOwner(userId);
       allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     *   Security rules for the `/users/{userId}/socialMediaAccounts/{socialMediaAccountId}` collection.
     *   This collection stores social media account information associated with a user.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) - The owner can create a social media account
     * @allow (get) - The owner can get a social media account
     * @deny (update) - Others cannot update
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     *   Security rules for the `/users/{userId}/posts/{postId}` collection.
     *   This collection stores post information created by a user.
     *   Includes denormalized 'userId' for authorization independence.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) - The owner can create a post.
     * @allow (get) - The owner can get a post.
     * @deny (update) - Others cannot update.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     *   Security rules for the `/users/{userId}/posts/{postId}/platformPosts/{platformPostId}` collection.
     *   This collection stores platform-specific post information related to a main post.
     *   Inherits authorization from parent post.
     * @path /users/{userId}/posts/{postId}/platformPosts/{platformPostId}
     * @allow (create) - The owner of the parent post can create a platform post.
     * @allow (get) - The owner of the parent post can get a platform post.
     * @deny (update) - Others cannot update.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/posts/{postId}/platformPosts/{platformPostId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     *   Security rules for the `/subscriptions/{subscriptionId}` collection.
     *   This collection stores subscription plan information.
     * @path /subscriptions/{subscriptionId}
     * @allow (get) - Anyone can get a subscription plan.
     * @deny (create) - No one can create a subscription plan through the client.
     * @deny (update) - No one can update a subscription plan through the client.
     * @principle Subscription plans are publicly readable but not writable via client-side rules.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}