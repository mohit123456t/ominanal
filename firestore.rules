/**
 * @fileOverview Firestore Security Rules for OmniPost AI.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data,
 * a role-based model for team data, and allows public read access for subscription data.
 * Data validation is relaxed during this prototyping phase, focusing on authorization.
 *
 * Data Structure:
 * - /users/{userId}: Root for user-specific data.  Enforces ownership.
 * - /teams/{teamId}: Root for team data. Uses a members map for role-based access.
 * - /teams/{teamId}/members/{memberId}: Stores team member roles.
 * - /users/{userId}/socialMediaAccounts/{socialMediaAccountId}: User's social media accounts. Enforces ownership.
 * - /users/{userId}/posts/{postId}: User's social media posts. Enforces ownership.
 * - /users/{userId}/posts/{postId}/platformPosts/{platformPostId}: Platform-specific post details. Enforces ownership.
 * - /subscriptions/{subscriptionId}: Publicly readable subscription plan details.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Subscriptions are publicly readable to facilitate easy access to plan information.
 * - Data validation is minimized to accelerate prototyping, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - Ownership: The `ownerId` field is denormalized into the `/teams/{teamId}` document
 * - Roles: The `members` map (UID -> role) is denormalized into the `/teams/{teamId}` document to avoid `get()` calls and allow easy role-based access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     *              Combines the ownership check with an existence check.
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows read and write access to authenticated users
     */
    // match /{document=**} {
    //    allow read: if isSignedIn();
    //    allow write: if isSignedIn();
    // }

    /**
     * @description Defines a subscription id
     */
     match /subscriptions/{subscriptionId} {
        allow read: if true;
        allow write: if false;
     }

     match /users/{userId} {
        allow read, write: if isSignedIn() && isOwner(userId);

        match /socialMediaAccounts/{socialMediaAccountId} {
          allow read, write: if isSignedIn() && isOwner(userId);
        }

        match /posts/{postId} {
          allow read, write: if isSignedIn() && isOwner(userId);

          match /platformPosts/{platformPostId} {
            allow read, write: if isSignedIn() && isOwner(userId);
          }
        }
     }

     match /teams/{teamId} {
        allow read, write: if isSignedIn();

        match /members/{memberId} {
          allow read, write: if isSignedIn() && request.auth.uid == teamId;
        }
     }
  }
}