/**
 * @file Firebase Security Rules for OmniPost AI.
 *
 * @corePhilosophy
 * This ruleset enforces a strict user-ownership model for personal data and
 * employs a role-based model for team collaboration. Data is organized
 * hierarchically under user or team documents.
 *
 * @dataStructure
 * - /users/{userId}: Root for user-specific data.
 * - /teams/{teamId}: Root for team-managed data.
 * - /teams/{teamId}/members/{memberId}: Maps users to roles within a team.
 * - /users/{userId}/socialMediaAccounts/{socialMediaAccountId}: Social media accounts owned by a user.
 * - /users/{userId}/posts/{postId}: Social media posts created by a user.
 * - /users/{userId}/posts/{postId}/platformPosts/{platformPostId}: Platform-specific instances of a post.
 * - /subscriptions/{subscriptionId}: Subscription plan details.
 *
 * @keySecurityDecisions
 * - Listing users is disallowed.
 * - All write operations require authentication.
 * - Authorization relies on the `request.auth` object for user identity.
 * - Data validation is limited to relational integrity checks.
 * - Public read access is granted to the `settings/pricing` document.
 *
 * @denormalizationForAuthorization
 *  - The `Post` entity includes a `userId` field for simpler authorization rules
 *    that avoid costly `get()` operations.
 *  - Team membership roles are managed in the `/teams/{teamId}/members/{memberId}`
 *    collection, allowing for role-based access control within teams.
 *
 * @structuralSegregation
 *  - Private user data is stored under `/users/{userId}`, while potentially public
 *    data could be stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to the public pricing document.
     * @path /settings/pricing
     * @allow (get, list) Any user can read the pricing details.
     * @deny (create, update, delete) No one can create, update, or delete the pricing document.
     * @principle Allows public read access to the pricing document.
     */
    match /settings/pricing {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) User "pjyh7yevqEbRfTQlSD0dIwzU6w42" can read, create, update and delete their own profile.
     * @deny (get, create, update, delete, list) User "otherUserId" cannot read, create, update or delete user "pjyh7yevqEbRfTQlSD0dIwzU6w42" profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages team information.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if false; // TODO: Implement team ownership/admin role check
        allow delete: if false; // TODO: Implement team ownership/admin role check
    }

    /**
     * @description Manages team membership roles.
     * @path /teams/{teamId}/members/{memberId}
     */
    match /teams/{teamId}/members/{memberId} {
        allow get: if isSignedIn(); // TODO: Implement team membership check
        allow list: if isSignedIn(); // TODO: Implement team membership check
        allow create: if isSignedIn(); // TODO: Implement team admin role check
        allow update: if isSignedIn(); // TODO: Implement team admin role check
        allow delete: if isSignedIn(); // TODO: Implement team admin role check
    }

    /**
     * @description Manages user-specific platform credentials.
     * @path /users/{userId}/platformCredentials/{platform}
     * @allow (get, create, update, delete, list) User "pjyh7yevqEbRfTQlSD0dIwzU6w42" can read, create, update and delete their own platformCredentials.
     * @deny (get, create, update, delete, list) User "otherUserId" cannot read, create, update or delete platformCredentials of user "pjyh7yevqEbRfTQlSD0dIwzU6w42".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/platformCredentials/{platform} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages social media accounts connected to a user.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (get, create, update, delete, list) User "pjyh7yevqEbRfTQlSD0dIwzU6w42" can read, create, update and delete their own socialMediaAccounts.
     * @deny (get, create, update, delete, list) User "otherUserId" cannot read, create, update or delete socialMediaAccounts of user "pjyh7yevqEbRfTQlSD0dIwzU6w42".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages social media posts created by a user.
     * @path /users/{userId}/posts/{postId}
     * @allow (get, create, update, delete, list) User "pjyh7yevqEbRfTQlSD0dIwzU6w42" can read, create, update and delete their own posts.
     * @deny (get, create, update, delete, list) User "otherUserId" cannot read, create, update or delete posts of user "pjyh7yevqEbRfTQlSD0dIwzU6w42".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages platform-specific post instances.
     * @path /users/{userId}/posts/{postId}/platformPosts/{platformPostId}
     * @allow (get, create, update, delete, list) User "pjyh7yevqEbRfTQlSD0dIwzU6w42" can read, create, update and delete their own platformPosts.
     * @deny (get, create, update, delete, list) User "otherUserId" cannot read, create, update or delete platformPosts of user "pjyh7yevqEbRfTQlSD0dIwzU6w42".
     * @principle Enforces document ownership inherited from parent post.
     */
    match /users/{userId}/posts/{postId}/platformPosts/{platformPostId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages subscription plan information.
     * @path /subscriptions/{subscriptionId}
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // ---- Helper functions ----

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the requesting user is the owner of the document.
   * @param {string} userId The user ID to compare against the request's auth UID.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the requesting user is the owner of the existing document.
   * @param {string} userId The user ID to compare against the request's auth UID.
   * @return {boolean} True if the user is the owner and the document exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}