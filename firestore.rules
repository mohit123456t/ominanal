/**
 * @file Firestore Security Rules for OmniPost AI Platform
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 *                  role-based access control for collaborative team data,
 *                  and public read access for subscription plans.  All write
 *                  operations are carefully guarded by authorization checks.
 *
 * @data_structure The data is organized hierarchically:
 *                  - /users/{userId}: User profiles and personal data.
 *                  - /teams/{teamId}: Team data with members and roles.
 *                  - /teams/{teamId}/members/{memberId}: Team member role assignments.
 *                  - /subscriptions/{subscriptionId}: Publicly readable subscription plans.
 *                  - /users/{userId}/socialMediaAccounts/{accountId}: User's connected social media accounts.
 *                  - /users/{userId}/posts/{postId}: User's social media posts.
 *                  - /users/{userId}/posts/{postId}/platformPosts/{platformPostId}: Platform-specific post instances.
 *
 * @key_security_decisions
 *                  - User listing is disallowed.
 *                  - Subscription plans are publicly readable.
 *                  - Data validation is minimized in the prototyping phase.
 *                  - All writes require explicit authorization.
 *
 * @denormalization_for_authorization
 *                  - User's `subscriptionId` is stored on `/users/{userId}` to
 *                    avoid requiring a `get()` call on `/subscriptions/{subscriptionId}`
 *                    for subscription-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *        Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user123', ... } } }
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     *        Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     *       Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user456', ... } } }
     * @deny (update, delete) User with ID 'user123' cannot update or delete profile for 'user456'.
     *       Request: { auth: { uid: 'user123' } }
     * @deny (list) No one can list all users.
     * @principle Enforces document ownership and prevents user enumeration.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects the /teams collection, allowing owner-only write access.
     * @path /teams/{teamId}
     * @allow (create) User with ID 'user123' can create a team with ownerId 'user123'.
     *        Request: { auth: { uid: 'user123' }, resource: { data: { ownerId: 'user123', ... } } }
     * @allow (get, list) Any authenticated user can get or list teams.
     *        Request: { auth: { uid: 'user123' } }
     * @allow (update, delete) Owner of the team ('user123') can update/delete.
     *        Request: { auth: { uid: 'user123' }, resource: { data: { ownerId: 'user123', ... } } }
     * @deny (create) User with ID 'user123' cannot create a team with ownerId 'user456'.
     *       Request: { auth: { uid: 'user123' }, resource: { data: { ownerId: 'user456', ... } } }
     * @deny (update, delete) User with ID 'user123' cannot update or delete team owned by 'user456'.
     *       Request: { auth: { uid: 'user123' }, resource: { data: { ownerId: 'user456', ... } } }
     * @principle Enforces owner-only writes and public reads for teams.
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }


      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
    }

        /**
         * @description Protects the /teams/{teamId}/members collection, allowing specific role-based access.
         * @path /teams/{teamId}/members/{memberId}
         * @allow (create) Admin or owner of 'team123' can add new members.
         *        Request: { auth: { uid: 'admin123' }, resource: { data: { teamId: 'team123', ... } }, parentTeam: { members: { 'admin123': 'admin' } } }
         * @allow (get, list) Any member of 'team123' can read the members list.
         *        Request: { auth: { uid: 'member123' }, parentTeam: { members: { 'member123': 'editor' } } }
         * @allow (update, delete) Admin or owner of 'team123' can update/delete members.
         *        Request: { auth: { uid: 'admin123' }, resource: { data: { teamId: 'team123', ... } }, parentTeam: { members: { 'admin123': 'admin' } } }
         * @deny (create) Non-admin of 'team123' cannot add new members.
         *       Request: { auth: { uid: 'member123' }, resource: { data: { teamId: 'team123', ... } }, parentTeam: { members: { 'member123': 'editor' } } }
         * @deny (update, delete) Non-admin of 'team123' cannot update or delete members.
         *       Request: { auth: { uid: 'member123' }, resource: { data: { teamId: 'team123', ... } }, parentTeam: { members: { 'member123': 'editor' } } }
         * @principle Enforces role-based access control for team membership management.
         */
    match /teams/{teamId}/members/{memberId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isAdminOrOwner(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdminOrOwner(teamId);
      allow update: if isSignedIn() && isAdminOrOwner(teamId);
      allow delete: if isSignedIn() && isAdminOrOwner(teamId);
    }

    /**
     * @description Protects the /users/{userId}/socialMediaAccounts collection.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) User with ID 'user123' can create a social media account under their profile.
     *        Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123', ... } } }
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own social media accounts.
     *        Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user123' cannot create a social media account for 'user456'.
     *       Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user456', ... } } }
     * @deny (update, delete) User with ID 'user123' cannot update or delete a social media account for 'user456'.
     *       Request: { auth: { uid: 'user123' } }
     * @principle Enforces document ownership for social media accounts.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }


      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/posts collection.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) User with ID 'user123' can create a post under their profile.
     *        Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123', ... } } }
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own posts.
     *        Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user123' cannot create a post for 'user456'.
     *       Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user456', ... } } }
     * @deny (update, delete) User with ID 'user123' cannot update or delete a post for 'user456'.
     *       Request: { auth: { uid: 'user123' } }
     * @principle Enforces document ownership for posts.
     */
    match /users/{userId}/posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }


      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/posts/{postId}/platformPosts collection.
     * @path /users/{userId}/posts/{postId}/platformPosts/{platformPostId}
     * @allow (create) User with ID 'user123' can create a platform post under their post.
     *        Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123', ... } }, parentPost: { userId: 'user123' } }
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own platform posts.
     *        Request: { auth: { uid: 'user123' }, parentPost: { userId: 'user123' } }
     * @deny (create) User with ID 'user123' cannot create a platform post for 'user456'.
     *       Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user456', ... } }, parentPost: { userId: 'user456' } }
     * @deny (update, delete) User with ID 'user123' cannot update or delete a platform post for 'user456'.
     *       Request: { auth: { uid: 'user123' }, parentPost: { userId: 'user456' } }
     * @principle Enforces document ownership for platform posts, inheriting from parent post.
     */
    match /users/{userId}/posts/{postId}/platformPosts/{platformPostId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }



      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects the /subscriptions collection, allowing public read access.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) Any user (signed in or not) can read subscription plans.
     *        Request: { }
     * @deny (create, update, delete) Only backend services should be able to modify subscription plans.
     * @principle Allows public read access for subscription plans.
     */
    match /subscriptions/{subscriptionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}