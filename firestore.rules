/**
 * @file Firestore Security Rules for OmniPost AI Platform
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 *                  role-based access control for collaborative team data,
 *                  and public read access for subscription plans.  All write
 *                  operations are protected by authorization checks to prevent unauthorized
 *                  data modification.  This initial ruleset prioritizes security and
 *                  authorization and does NOT perform extensive data validation.
 *
 * @data_structure The Firestore database is structured with user-owned data nested under
 *                 `/users/{userId}`.  Team data is stored under `/teams/{teamId}`,
 *                 with membership information stored in a subcollection.
 *                 Subscription plans are stored in the top-level `/subscriptions` collection.
 *
 * @key_security_decisions
 *   - User data is strictly controlled by the owning user.
 *   - Teams enable collaborative access via explicitly defined membership roles.
 *   - Subscriptions are publicly readable to allow all users to view available plans.
 *   - Listing of user documents is disallowed to prevent enumeration attacks.
 *
 * @denormalization_for_authorization
 *   - To avoid costly `get()` calls, the `TeamMember` document holds the `userId`
 *     directly, enabling simple role-based checks for team resources.
 *   - Similarly, `Post` documents under `/users/{userId}/posts/{postId}` denormalize
 *     the `userId` to allow simple authorization rules for all writes without
 *     requiring additional reads.
 *
 * @structural_segregation
 *   - User-specific data (e.g., posts, social media accounts) is stored in private
 *     user subcollections, while subscription plans are stored in a public top-level
 *     collection. This ensures that private data is not accidentally exposed through
 *     overly permissive list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {bool} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing resource.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {bool} True if the user IDs match and the resource exists, false otherwise.
     * @example isExistingOwner('someUserId') == (request.auth.uid == 'someUserId' && resource != null)
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Checks if the authenticated user is an owner of the team
     * @param {string} teamId The team ID to check.
     * @return {bool} True if the user is the team owner, false otherwise.
     */
    function isTeamOwner(teamId) {
      return exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)) && get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role == 'owner';
    }

    /**
     * @description Checks if the authenticated user is a member of the team with the required role
     * @param {string} teamId The team ID to check.
     * @param {string} role The role required for the operation.
     * @return {bool} True if the user is a member of the team with the required role, false otherwise.
     */
    function isTeamMemberWithRole(teamId, role) {
      return exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)) && get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role == role;
    }

    /**
     * @description Checks if the authenticated user is a member of the team (any role)
     * @param {string} teamId The team ID to check.
     * @return {bool} True if the user is a member of the team, false otherwise.
     */
    function isTeamMember(teamId) {
      return exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid));
    }


    /**
     * @description Defines access rules for user profile data.
     * @path /users/{userId}
     * @allow (create) if the user is creating their own profile.
     * @allow (get, update, delete) if the user is accessing their own profile.
     * @deny (create) if the user is attempting to create another user's profile.
     * @deny (get, update, delete) if the user is attempting to access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for team data.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      allow get: if isTeamMember(teamId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isTeamOwner(teamId);
      allow delete: if isTeamOwner(teamId);
    }

    /**
     * @description Defines access rules for team members.
     * @path /teams/{teamId}/members/{memberId}
     */
    match /teams/{teamId}/members/{memberId} {
      allow get: if isTeamMember(teamId);
      allow list: if false;
      allow create: if isTeamOwner(teamId);
      allow update: if isTeamOwner(teamId);
      allow delete: if isTeamOwner(teamId);
    }

    /**
     * @description Defines access rules for platform credentials.
     * @path /users/{userId}/platformCredentials/{platform}
     * @allow (create) if the user is creating their own credentials.
     * @allow (get, update, delete) if the user is accessing their own credentials.
     * @deny (create) if the user is attempting to create another user's credentials.
     * @deny (get, update, delete) if the user is attempting to access another user's credentials.
     * @principle Enforces user-ownership for credential data.
     */
    match /users/{userId}/platformCredentials/{platform} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for social media accounts.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) if the user is creating their own account.
     * @allow (get, update, delete) if the user is accessing their own account.
     * @deny (create) if the user is attempting to create another user's account.
     * @deny (get, update, delete) if the user is attempting to access another user's account.
     * @principle Enforces user-ownership for social media account data.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for posts.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) if the user is creating their own post.
     * @allow (get, update, delete) if the user is accessing their own post.
     * @deny (create) if the user is attempting to create another user's post.
     * @deny (get, update, delete) if the user is attempting to access another user's post.
     * @principle Enforces user-ownership for post data.
     */
    match /users/{userId}/posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for platform posts.
     * @path /users/{userId}/posts/{postId}/platformPosts/{platformPostId}
     * @allow (create) if the user is creating their own platform post.
     * @allow (get, update, delete) if the user is accessing their own platform post.
     * @deny (create) if the user is attempting to create another user's platform post.
     * @deny (get, update, delete) if the user is attempting to access another user's platform post.
     * @principle Enforces user-ownership for platform post data.
     */
    match /users/{userId}/posts/{postId}/platformPosts/{platformPostId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for subscription plans.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to all users.
     * @principle Allows public read access for subscription plans, restricts write access.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}