/**
 * @fileoverview Firestore Security Rules for OmniPost AI Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for data under the /users/{userId} collection.
 * Only authenticated users can access their own data.
 * Admins, identified via documents in the /roles_admin/{userId} collection, have broader access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/socialMediaAccounts/{socialMediaAccountId}: Stores social media account information.
 * - /users/{userId}/posts/{postId}: Stores posts created by users.
 * - /subscriptions/{subscriptionId}: Stores subscription plan details (publicly readable).
 * - /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}: Stores analytics data.
 * - /roles_admin/{userId}: Used to denote admin users. The existence of a document with a user's ID grants admin rights.
 *
 * Key Security Decisions:
 * - User listing is disabled for the /users collection to protect user privacy.
 * - Subscription plans are publicly readable to allow all users to view available plans.
 * - Admin privileges are determined by the existence of a document in the /roles_admin collection.
 * - Data validation is minimized in this prototyping phase to allow flexible schema changes.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by nesting data under the /users/{userId} path.
 * - Admin status is determined by the existence of a document in /roles_admin/{userId}, avoiding the need to store admin roles within the user document itself.
 *
 * Structural Segregation:
 * - Private user data is stored under the /users/{userId} collection, while public subscription data is stored in a separate top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by an existing owner of the resource.
     * @param {string} userId - The user ID to compare with the resource's owner ID and ensures resource exists.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an administrator by verifying the existence of a document in the /roles_admin/{userId} collection.
     * @return {boolean} True if the user is an administrator, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with matching ID can create their own profile.
     * @allow (get, update, delete) - User can access and modify their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - User cannot create a profile with an ID that doesn't match their own.
     * @principle Enforces document ownership for writes.  Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/socialMediaAccounts/{socialMediaAccountId} collection.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create, get, list, update, delete) - User can manage their own social media accounts.
     * @deny (create, get, list, update, delete) - Other users cannot manage social media accounts of other users.
     * @principle Enforces document ownership for writes.  Restricts access to a user's own data tree.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/posts/{postId} collection.
     * @path /users/{userId}/posts/{postId}
     * @allow (create, get, list, update, delete) - User can manage their own posts.
     * @deny (create, get, list, update, delete) - Other users cannot manage posts of other users.
     * @principle Enforces document ownership for writes.  Restricts access to a user's own data tree.
     */
    match /users/{userId}/posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /subscriptions/{subscriptionId} collection.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) - All users can read subscription plans.
     * @deny (create, update, delete) - Only admins can manage subscription plans.
     * @principle Public read, admin-only write.
     */
    match /subscriptions/{subscriptionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId} collection.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}
     * @allow (create, get, list, update, delete) - User can manage analytics data for their own social media accounts.
     * @deny (create, get, list, update, delete) - Other users cannot manage analytics data of other users.
     * @principle Enforces document ownership for writes.  Restricts access to a user's own data tree.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.  The existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) - Only an existing admin can grant admin privileges to another user.
     * @allow (get) - Only an existing admin can check if a user is an admin.
     * @allow (delete) - Only an existing admin can revoke admin privileges.
     * @deny (list) - Prevent listing of all admins.
     * @principle Existence-based admin role.
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin() && resource != null;
    }
  }
}