/**
 * @file Firestore Security Rules for OmniPost AI Platform
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for data stored under the /users/{userId} path.
 *  Administrative privileges are granted based on the existence of a document in the /roles_admin/{userId} collection.
 *
 * @data_structure
 * - User profiles are stored in `/users/{userId}`.
 * - Social media accounts are stored in `/users/{userId}/socialMediaAccounts/{socialMediaAccountId}`.
 * - Posts are stored in `/users/{userId}/posts/{postId}`.
 * - Analytics data is stored in `/users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}`.
 * - Subscription plans are stored in `/subscriptions/{subscriptionId}`.
 * - Administrator roles are determined by documents in `/roles_admin/{userId}`.
 *
 * @key_security_decisions
 * - Listing of users is disallowed.
 * - Public read access is not granted to any user-specific data.
 * - All write operations require authentication.
 * - Data consistency is enforced by validating the userId within documents against the path.
 *
 * @denormalization_for_authorization
 * - User ownership is enforced via path-based rules, avoiding the need for `get()` calls to parent documents.
 * - Admin privileges are determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * @structural_segregation
 * - Private user data is stored under `/users/{userId}`, while subscription plans are stored in a separate top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data. Only the user can read, update, or delete their own profile. Allows self-creation.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile if request.auth.uid == 'abc'.
     * @allow (get, update, delete) - User 'abc' can read, update, or delete their profile if request.auth.uid == 'abc'.
     * @deny (create) - User 'def' cannot create a profile for user 'abc'.
     * @deny (update, delete) - User 'def' cannot update or delete the profile for user 'abc'.
     * @principle Enforces document ownership for reads and writes. Allows self-creation.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures social media account data. Only the owning user can create, read, update, or delete accounts under their profile.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) - User 'abc' can create a social media account under their profile.
     * @allow (get, update, delete) - User 'abc' can read, update, or delete a social media account under their profile.
     * @deny (create) - User 'def' cannot create a social media account under user 'abc''s profile.
     * @deny (update, delete) - User 'def' cannot update or delete a social media account under user 'abc''s profile.
     * @principle Enforces document ownership for reads and writes in a nested collection.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures post data. Only the owning user can create, read, update, or delete posts under their profile.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) - User 'abc' can create a post under their profile.
     * @allow (get, update, delete) - User 'abc' can read, update, or delete a post under their profile.
     * @deny (create) - User 'def' cannot create a post under user 'abc''s profile.
     * @deny (update, delete) - User 'def' cannot update or delete a post under user 'abc''s profile.
     * @principle Enforces document ownership for reads and writes in a nested collection.
     */
    match /users/{userId}/posts/{postId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures subscription plan data.  Anyone can read subscription plans, but only an admin can create, update, or delete them.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) - Any user can read the subscription plans.
     * @allow (create, update, delete) - Only an admin user can create, update, or delete subscription plans.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete subscription plans.
     * @principle Public read access with admin-only writes.
     */
    match /subscriptions/{subscriptionId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures analytics data. Only the owning user can create, read, update, or delete analytics data under their profile.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}
     * @allow (create) - User 'abc' can create analytics data under their social media account.
     * @allow (get, update, delete) - User 'abc' can read, update, or delete analytics data under their social media account.
     * @deny (create) - User 'def' cannot create analytics data under user 'abc''s social media account.
     * @deny (update, delete) - User 'def' cannot update or delete analytics data under user 'abc''s social media account.
     * @principle Enforces document ownership for reads and writes in a deeply nested collection.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Determines admin privileges based on the existence of a document.
     * @path /roles_admin/{userId}
     * @allow (create) - Anyone can create their own admin document, effectively granting themselves admin rights.
     * @allow (get) - Any authenticated user can check if they are an admin.
     * @allow (delete) - Admin can revoke the role from themself.
     * @deny (create, update, delete) - Non-admin users cannot grant or revoke admin privileges for other users.
     */
    match /roles_admin/{userId} {
       function isAdmin() {
            return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) ;
      allow update: if false;
      allow delete: if isOwner(userId);
    }
  }
}