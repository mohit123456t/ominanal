/**
 * @fileoverview Firestore Security Rules for OmniPost AI Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, ensuring users can only access their own information.
 * Administrative privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 * - Social media accounts and posts are nested under `/users/{userId}`.
 * - Subscription plans are stored in `/subscriptions/{subscriptionId}`.
 * - Analytics data are nested under `/users/{userId}/socialMediaAccounts/{socialMediaAccountId}`
 * - Admin roles are determined by the existence of documents in `/roles_admin/{userId}`.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed except for admins.
 * - All write operations require authentication.
 * - Subscription data is publicly readable but not writable by clients.
 * - Admin privileges are granted based on document existence in `/roles_admin/{userId}`.
 *
 * Denormalization for Authorization:
 * - User documents are intended to include a `subscriptionId` to avoid needing a `get()` call to the `/subscriptions` collection for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles.  Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete their own profile if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure social media accounts associated with a user. Users can only manage their own accounts.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}
     * @allow (create) - User with ID 'user123' can create a social media account under their profile.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete a social media account under their profile.
     * @deny (create) - User with ID 'user456' cannot create a social media account under 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete a social media account under 'user123'.
     * @principle Enforces document ownership for writes within a user's data tree.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure posts created by a user. Users can only manage their own posts.
     * @path /users/{userId}/posts/{postId}
     * @allow (create) - User with ID 'user123' can create a post under their profile.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete a post under their profile.
     * @deny (create) - User with ID 'user456' cannot create a post under 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete a post under 'user123'.
     * @principle Enforces document ownership for writes within a user's data tree.
     */
    match /users/{userId}/posts/{postId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow public read access to subscription plans, but prevent client-side writes.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) - Any user can read subscription plans.
     * @deny (create, update, delete) - No user can create, update, or delete a subscription plan.  These operations should be handled by backend services.
     * @principle Public read access with restricted writes.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure analytics data associated with a user's social media account.  Users can only access their own analytics data.
     * @path /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}
     * @allow (create) - User with ID 'user123' can create analytics data under their social media account.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete analytics data under their social media account.
     * @deny (create) - User with ID 'user456' cannot create analytics data under 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete analytics data under 'user123'.
     * @principle Enforces document ownership for writes within a user's data tree.
     */
    match /users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (get) - Any authenticated user can check if they are an admin.
     * @allow (create, update, delete) - Only existing admins can manage admin roles.  This requires a custom token or backend service.
     * @deny (create, update, delete) - Non-admins cannot grant themselves admin privileges.
     * @principle Existence-based role assignment for admins.
     */
    match /roles_admin/{userId} {
       function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
      allow get: if request.auth != null; // Any signed-in user can check for admin status.
      allow list: if false; // No client-side listing.

      allow create: if isAdmin(); // Only existing admins can create new admins.  Requires custom auth or backend.
      allow update: if isAdmin() && resource != null; // Only existing admins can update admin records.
      allow delete: if isAdmin() && resource != null; // Only existing admins can remove admin roles.
    }
  }
}