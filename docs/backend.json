{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the OmniPost AI platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user.",
          "format": "uuid"
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "mobileNumber": {
          "type": "string",
          "description": "Mobile number of the user."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Reference to Subscription. (Relationship: User 1:1 Subscription)"
        },
        "role": {
          "type": "string",
          "description": "The role of the user (e.g., brand, admin, video_editor)."
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "mobileNumber",
        "subscriptionId",
        "role"
      ]
    },
    "SocialMediaAccount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SocialMediaAccount",
      "type": "object",
      "description": "Represents a social media account connected to the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the social media account.",
          "format": "uuid"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N SocialMediaAccount)"
        },
        "platform": {
          "type": "string",
          "description": "The platform of the social media account (e.g., Instagram, Facebook, X)."
        },
        "accountId": {
          "type": "string",
          "description": "The unique account identifier provided by the platform."
        },
        "accountName": {
          "type": "string",
          "description": "The name of the social media account."
        }
      },
      "required": [
        "id",
        "userId",
        "platform",
        "accountId",
        "accountName"
      ]
    },
    "Post": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Post",
      "type": "object",
      "description": "Represents a social media post.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the post.",
          "format": "uuid"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Post)"
        },
        "socialMediaAccountId": {
          "type": "string",
          "description": "Reference to SocialMediaAccount. (Relationship: SocialMediaAccount 1:N Post)"
        },
        "content": {
          "type": "string",
          "description": "The content of the post."
        },
        "scheduledTime": {
          "type": "string",
          "description": "The scheduled time for the post to be published.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the post (e.g., scheduled, published, failed)."
        }
      },
      "required": [
        "id",
        "userId",
        "socialMediaAccountId",
        "content",
        "scheduledTime",
        "status"
      ]
    },
    "Subscription": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Subscription",
      "type": "object",
      "description": "Represents a subscription plan for the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the subscription.",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "The name of the subscription plan (e.g., Free, Pro, Agency)."
        },
        "price": {
          "type": "number",
          "description": "The price of the subscription plan per month."
        },
        "maxAccounts": {
          "type": "number",
          "description": "The maximum number of social media accounts allowed for the subscription plan."
        },
        "maxScheduledPosts": {
          "type": "number",
          "description": "The maximum number of scheduled posts allowed for the subscription plan."
        }
      },
      "required": [
        "id",
        "name",
        "price",
        "maxAccounts",
        "maxScheduledPosts"
      ]
    },
    "Analytics": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Analytics",
      "type": "object",
      "description": "Represents analytics data for a social media account.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the analytics data.",
          "format": "uuid"
        },
        "socialMediaAccountId": {
          "type": "string",
          "description": "Reference to SocialMediaAccount. (Relationship: SocialMediaAccount 1:N Analytics)"
        },
        "date": {
          "type": "string",
          "description": "The date for which the analytics data is recorded.",
          "format": "date-time"
        },
        "followerCount": {
          "type": "number",
          "description": "The number of followers/subscribers for the social media account."
        },
        "engagementRate": {
          "type": "number",
          "description": "The engagement rate for the social media account."
        },
        "postReach": {
          "type": "number",
          "description": "The reach of the posts for the social media account."
        },
        "impressions": {
          "type": "number",
          "description": "The number of impressions for the social media account."
        }
      },
      "required": [
        "id",
        "socialMediaAccountId",
        "date",
        "followerCount",
        "engagementRate",
        "postReach",
        "impressions"
      ]
    },
    "Admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Admin",
      "type": "object",
      "description": "Represents an administrator user with elevated privileges.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the administrator.",
          "format": "uuid"
        },
        "email": {
          "type": "string",
          "description": "Email address of the administrator.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the administrator."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the administrator."
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  Includes denormalized data for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/socialMediaAccounts/{socialMediaAccountId}",
        "definition": {
          "entityName": "SocialMediaAccount",
          "schema": {
            "$ref": "#/backend/entities/SocialMediaAccount"
          },
          "description": "Stores social media accounts associated with a user. Uses hierarchical path for ownership. Includes denormalized data for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "socialMediaAccountId",
              "description": "The unique identifier for the social media account."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/posts/{postId}",
        "definition": {
          "entityName": "Post",
          "schema": {
            "$ref": "#/backend/entities/Post"
          },
          "description": "Stores posts created by a user. Uses hierarchical path for ownership. Includes denormalized data for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "postId",
              "description": "The unique identifier for the post."
            }
          ]
        }
      },
      {
        "path": "/subscriptions/{subscriptionId}",
        "definition": {
          "entityName": "Subscription",
          "schema": {
            "$ref": "#/backend/entities/Subscription"
          },
          "description": "Stores subscription plans.",
          "params": [
            {
              "name": "subscriptionId",
              "description": "The unique identifier for the subscription."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/socialMediaAccounts/{socialMediaAccountId}/analytics/{analyticsId}",
        "definition": {
          "entityName": "Analytics",
          "schema": {
            "$ref": "#/backend/entities/Analytics"
          },
          "description": "Stores analytics data for social media accounts. Uses hierarchical path for ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "socialMediaAccountId",
              "description": "The unique identifier for the social media account."
            },
            {
              "name": "analyticsId",
              "description": "The unique identifier for the analytics data."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "Admin",
          "schema": {
            "$ref": "#/backend/entities/Admin"
          },
          "description": "Marks a user as an administrator. Existence of the document grants admin privileges.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the admin user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the OmniPost AI platform, focusing on user-owned data and administrative roles. User-specific data such as social media accounts and posts are nested under the `/users/{userId}` collection, enabling path-based ownership and simplified security rules. Subscription data is stored at the root level, with each user document referencing their subscription. To manage administrative privileges, a dedicated `/roles_admin/{uid}` collection is utilized, leveraging existence-based rules for authorization. This design ensures authorization independence by avoiding hierarchical `get()` calls, promoting atomic operations and easier debugging. The structure supports the required QAPs by segregating user-owned data under the `/users/{userId}` path and utilizing a separate collection for admin roles. This segregation allows for secure listing operations within each user's data scope and restricts access to admin-only functions."
  }
}