{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the OmniPost AI platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user.",
          "format": "uuid"
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was last updated.",
          "format": "date-time"
        },
        "subscriptionId": {
          "type": "string",
          "description": "Reference to Subscription. (Relationship: User 1:1 Subscription)"
        }
      },
      "required": [
        "id",
        "email",
        "createdAt",
        "updatedAt",
        "subscriptionId"
      ]
    },
    "Team": {
      "title": "Team",
      "description": "Represents a team or organization within the platform.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the team."
        },
        "name": {
          "type": "string",
          "description": "The name of the team."
        },
        "ownerId": {
          "type": "string",
          "description": "The ID of the user who owns the team."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp for when the team was created.",
          "format": "date-time"
        }
      },
      "required": ["id", "name", "ownerId", "createdAt"]
    },
    "TeamMember": {
      "title": "TeamMember",
      "description": "Represents a user's membership and role within a team.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the membership record."
        },
        "teamId": {
          "type": "string",
          "description": "The ID of the team the user belongs to."
        },
        "userId": {
          "type": "string",
          "description": "The ID of the user."
        },
        "role": {
          "type": "string",
          "description": "The role of the user within the team.",
          "enum": ["owner", "admin", "editor"]
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp for when the user joined the team.",
          "format": "date-time"
        }
      },
      "required": ["id", "teamId", "userId", "role", "createdAt"]
    },
    "SocialMediaAccount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SocialMediaAccount",
      "type": "object",
      "description": "Represents a social media account connected to a user's OmniPost AI account.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the social media account."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N SocialMediaAccount)"
        },
        "platform": {
          "type": "string",
          "description": "The social media platform (e.g., Instagram, Facebook, X)."
        },
        "username": {
          "type": "string",
          "description": "The username of the social media account."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the social media account was connected.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the social media account was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "platform",
        "username",
        "createdAt",
        "updatedAt"
      ]
    },
    "Post": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Post",
      "type": "object",
      "description": "Represents a social media post created and managed within OmniPost AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the post."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Post)"
        },
        "content": {
          "type": "string",
          "description": "The text content of the post."
        },
        "mediaUrl": {
          "type": "string",
          "description": "URL of the media file associated with the post, if any.",
          "format": "uri"
        },
        "status": {
          "type": "string",
          "description": "The status of the post (e.g., Scheduled, Published, Draft).",
          "format": "uri"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the post was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the post was last updated.",
          "format": "date-time"
        },
        "scheduledAt": {
          "type": "string",
          "description": "Timestamp indicating when the post is scheduled to be published, if applicable.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "content",
        "status",
        "createdAt",
        "updatedAt"
      ]
    },
    "PlatformPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PlatformPost",
      "type": "object",
      "description": "Represents a social media post created and managed within OmniPost AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Platform post."
        },
        "postId": {
          "type": "string",
          "description": "Reference to Post. (Relationship: Post 1:N PlatformPost)"
        },
        "socialMediaAccountId": {
          "type": "string",
          "description": "Reference to SocialMediaAccount. (Relationship: SocialMediaAccount 1:N PlatformPost)"
        },
        "publishedAt": {
          "type": "string",
          "description": "Timestamp indicating when the post was published.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the Platform post (e.g., Published, Error).",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "postId",
        "socialMediaAccountId",
        "publishedAt",
        "status"
      ]
    },
    "Subscription": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Subscription",
      "type": "object",
      "description": "Represents a subscription plan for OmniPost AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the subscription plan."
        },
        "name": {
          "type": "string",
          "description": "Name of the subscription plan (e.g., Free, Pro, Agency)."
        },
        "price": {
          "type": "number",
          "description": "Monthly price of the subscription plan."
        },
        "accountLimit": {
          "type": "number",
          "description": "Maximum number of social media accounts allowed for the subscription plan."
        },
        "postLimit": {
          "type": "number",
          "description": "Maximum number of scheduled posts allowed per month."
        },
        "aiFeatures": {
          "type": "string",
          "description": "AI content generation feature availability."
        },
        "analyticsLevel": {
          "type": "string",
          "description": "Level of analytics available for the subscription plan."
        }
      },
      "required": [
        "id",
        "name",
        "price",
        "accountLimit",
        "postLimit",
        "aiFeatures",
        "analyticsLevel"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Root document for all user-owned data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/teams/{teamId}",
        "definition": {
            "entityName": "Team",
            "schema": {
                "$ref": "#/backend/entities/Team"
            },
            "description": "Stores team information and serves as the root for team-owned data.",
            "params": [{ "name": "teamId", "description": "The unique identifier of the team." }]
        }
      },
      {
        "path": "/teams/{teamId}/members/{memberId}",
        "definition": {
            "entityName": "TeamMember",
            "schema": {
                "$ref": "#/backend/entities/TeamMember"
            },
            "description": "Stores the list of members for a team and their roles.",
            "params": [
                { "name": "teamId", "description": "The unique identifier of the team." },
                { "name": "memberId", "description": "The unique identifier of the team member record, often the userId." }
            ]
        }
      },
      {
        "path": "/users/{userId}/socialMediaAccounts/{socialMediaAccountId}",
        "definition": {
          "entityName": "SocialMediaAccount",
          "schema": {
            "$ref": "#/backend/entities/SocialMediaAccount"
          },
          "description": "Stores social media account information associated with a user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "socialMediaAccountId",
              "description": "The unique identifier of the social media account."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/posts/{postId}",
        "definition": {
          "entityName": "Post",
          "schema": {
            "$ref": "#/backend/entities/Post"
          },
          "description": "Stores post information created by a user. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "postId",
              "description": "The unique identifier of the post."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/posts/{postId}/platformPosts/{platformPostId}",
        "definition": {
          "entityName": "PlatformPost",
          "schema": {
            "$ref": "#/backend/entities/PlatformPost"
          },
          "description": "Stores platform-specific post information related to a main post. Inherits authorization from parent post.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "postId",
              "description": "The unique identifier of the parent post."
            },
            {
              "name": "platformPostId",
              "description": "The unique identifier of the platform-specific post."
            }
          ]
        }
      },
      {
        "path": "/subscriptions/{subscriptionId}",
        "definition": {
          "entityName": "Subscription",
          "schema": {
            "$ref": "#/backend/entities/Subscription"
          },
          "description": "Stores subscription plan information.",
          "params": [
            {
              "name": "subscriptionId",
              "description": "The unique identifier of the subscription plan."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the OmniPost AI platform's core features, emphasizing authorization independence, scalability, and security. It leverages path-based ownership for user-specific data and a membership map model for collaborative data. Denormalization is employed to avoid `get()` calls in security rules and to ensure atomic operations.\n\n1.  **User Data:** User profiles are stored under `/users/{userId}`, providing straightforward ownership-based access control.\n2. **Team Data:** Teams are stored in a top-level `/teams` collection. Each team has a `members` sub-collection that maps user IDs to roles, establishing clear ownership and role-based access for collaborative features, which is essential for an agency model.\n3.  **Social Media Accounts:** Social media accounts owned by users are stored in `/users/{userId}/socialMediaAccounts/{accountId}`, ensuring that only the user can manage their connected accounts. For agency use, these could be moved under a team structure in the future.\n4.  **Posts:** Posts created by users are stored in `/users/{userId}/posts/{postId}`. This structure maintains clear ownership. For agency use, posts would be associated with a team, allowing team members to collaborate.\n5.  **Platform Posts:** Platform-specific post instances are located in `/users/{userId}/posts/{postId}/platformPosts/{platformPostId}`, inheriting authorization from the parent post.\n6.  **Subscriptions:** Subscription plans are stored in `/subscriptions/{subscriptionId}`. User's `subscriptionId` is stored on `/users/{userId}`. For an agency model, subscriptions would likely be tied to a team rather than an individual user."
  }
}
